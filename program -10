#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_PRODUCTIONS 10
#define MAX_SYMBOLS 50
#define MAX_LENGTH 50

// Structure to store a production rule
typedef struct {
    char lhs;                    // Left-hand side non-terminal
    char rhs[MAX_PRODUCTIONS][MAX_LENGTH];  // Right-hand side alternatives
    int num_rhs;                 // Number of alternatives
} Production;

// Function to print the grammar
void printGrammar(Production grammar[], int num_non_terminals) {
    for (int i = 0; i < num_non_terminals; i++) {
        printf("%c -> ", grammar[i].lhs);
        for (int j = 0; j < grammar[i].num_rhs; j++) {
            printf("%s ", grammar[i].rhs[j]);
            if (j != grammar[i].num_rhs - 1) {
                printf("| ");
            }
        }
        printf("\n");
    }
}

// Function to perform left factoring on the given grammar
void leftFactoring(Production grammar[], int *num_non_terminals) {
    for (int i = 0; i < *num_non_terminals; i++) {
        // Check for common prefixes in the productions
        for (int j = i + 1; j < *num_non_terminals; j++) {
            if (grammar[i].lhs == grammar[j].lhs) {
                // Check common prefix between grammar[i] and grammar[j]
                int prefix_len = 0;
                while (prefix_len < grammar[i].num_rhs && prefix_len < grammar[j].num_rhs &&
                       strncmp(grammar[i].rhs[0], grammar[j].rhs[0], prefix_len) == 0) {
                    prefix_len++;
                }

                // If there's a common prefix, we need to factor it
                if (prefix_len > 0) {
                    char new_non_terminal = 'A' + *num_non_terminals;  // New non-terminal
                    grammar[*num_non_terminals].lhs = new_non_terminal;
                    grammar[*num_non_terminals].num_rhs = 0;

                    // Create the factored prefix
                    char prefix[prefix_len + 1];
                    strncpy(prefix, grammar[i].rhs[0], prefix_len);
                    prefix[prefix_len] = '\0';

                    // Add the new non-terminal production
                    sprintf(grammar[*num_non_terminals].rhs[grammar[*num_non_terminals].num_rhs], "%s", prefix);
                    grammar[*num_non_terminals].num_rhs++;

